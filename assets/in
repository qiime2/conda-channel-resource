#!/usr/bin/env python

import os
import sys
import json

import conda_build.api

import common


def main(source, version, params, inpath):
    pkg_name = source['pkg_name']
    matched = source.pop('matched', set())
    pkg_version = common.from_version(version)

    with common.connect(source) as conn:
        data = common.ChannelData(conn=conn)
        relpaths = list(data.iter_paths(name=pkg_name, version=pkg_version))
        if not relpaths:
            raise Exception("Couldn't find requested version (%r) of %r"
                            % (pkg_version, pkg_name))
        # noarch is a special case that tells conda that it's a "real" channel
        noarch_path = os.path.join(inpath, 'noarch')
        os.makedirs(noarch_path, exist_ok=True)
        for relpath in relpaths:
            dest_path = os.path.join(inpath, relpath)
            directory = os.path.dirname(dest_path)
            os.makedirs(directory, exist_ok=True)
            with open(dest_path, 'wb') as fh:
                conn.download(relpath, fh)

    # ChannelData.iter_repodata_filehandles could be used here, but it would
    # be more work than letting conda do it, since it is a local filesystem.
    cfg = conda_build.api.Config(verbose=False)
    conda_build.api.update_index(inpath, config=cfg)

    with open(os.path.join(inpath, 'version-spec.txt'), 'w') as fh:
        fh.write("'%s=%s'\n" % (pkg_name, pkg_version))

    return {'version': version,
            'metadata': [{'name': 'files', 'value': '\n'.join(relpaths)}]}


if __name__ == '__main__':
    options = json.load(sys.stdin)
    response = main(options['source'],
                    options['version'],
                    options.get('params', {}),
                    sys.argv[1])
    print(json.dumps(response))
